---
commonOverlays:
  - name: "apply nukleros labels"
    query: "metadata.labels"
    value:
      platform.nukleros.io/category: "{{ .category }}"
      platform.nukleros.io/project: "{{ .project }}"
    onMissing:
      action: inject

  - name: "apply nukleros labels to pod template"
    query: "spec.template.metadata.labels"
    value:
      platform.nukleros.io/category: "{{ .category }}"
      platform.nukleros.io/project: "{{ .project }}"
    onMissing:
      action: inject

  - name: "remove the helm info"
    query: 
      - metadata.labels["helm.sh/chart"]
      - metadata.labels["app.kubernetes.io/managed-by"]
    action: delete

yamlFiles:
  - name: "external-secrets deployments"
    path: "../../vendor/external-secrets.yaml"
    outputPath: "certificates/external-secrets/deployment.yaml"
    overlays:
      - name: "ensure we are only acting upon deployment resources"
        query: "$"
        action: delete
        documentQuery:
          - conditions:
              - query: $[?($.kind != "Deployment")]

      - name: "ensure namespace is updated"
        query: metadata.namespace
        value: "{{ .namespace }}"

      - name: "ensure container security context is updated"
        query: spec.template.spec.containers[*]
        onMissing:
          action: inject
        value:
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
            runAsUser: 65534

      - name: "ensure controller resources are updated"
        query: spec.template.spec.containers[*]
        value:
          resources:
            requests:
              cpu: "{{ .controller.resources.requests.cpu }}"
              memory: "{{ .controller.resources.requests.memory }}"
            limits:
              cpu: "{{ .controller.resources.limits.cpu }}"
              memory: "{{ .controller.resources.limits.memory }}"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets")]

      - name: "ensure controller concurrency is updated"
        query: spec.template.spec.containers[?(@.name == "external-secrets")].args[?(@ =~ /^--concurrent=/)]
        value: "--concurrent=2"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets")]

      - name: "ensure other controller changes are made"
        query: spec
        action: merge
        value:
          replicas: !!int {{ .controller.replicas }}
          template:
            spec:
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        topologyKey: kubernetes.io/hostname
                        labelSelector:
                          matchExpressions:
                            - key: app.kubernetes.io/name
                              operator: In
                              values:
                                - external-secrets
              nodeSelector:
                kubernetes.io/os: linux
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets")]

      - name: "ensure cert-controller resources are updated"
        query: spec.template.spec.containers[*]
        value:
          resources:
            requests:
              cpu: "{{ .cert_controller.resources.requests.cpu }}"
              memory: "{{ .cert_controller.resources.requests.memory }}"
            limits:
              cpu: "{{ .cert_controller.resources.limits.cpu }}"
              memory: "{{ .cert_controller.resources.limits.memory }}"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-cert-controller")]

      - name: "ensure other cert-controller changes are made"
        query: spec
        action: merge
        value:
          replicas: !!int {{ .cert_controller.replicas }}
          template:
            spec:
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        topologyKey: kubernetes.io/hostname
                        labelSelector:
                          matchExpressions:
                            - key: app.kubernetes.io/name
                              operator: In
                              values:
                                - external-secrets-cert-controller
              nodeSelector:
                kubernetes.io/os: linux
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-cert-controller")]

      - name: "ensure cert-controller service namespace is updated"
        query: spec.template.spec.containers[?(@.name == "cert-controller")].args[?(@ =~ /^--service-namespace=/)]
        value: "--service-namespace={{ .namespace }}"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-cert-controller")]

      - name: "ensure cert-controller secret namespace is updated"
        query: spec.template.spec.containers[?(@.name == "cert-controller")].args[?(@ =~ /^--secret-namespace=/)]
        value: "--secret-namespace={{ .namespace }}"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-cert-controller")]

      - name: "ensure webhook resources are updated"
        query: spec.template.spec.containers[*]
        value:
          resources:
            requests:
              cpu: "{{ .webhook.resources.requests.cpu }}"
              memory: "{{ .webhook.resources.requests.memory }}"
            limits:
              cpu: "{{ .webhook.resources.limits.cpu }}"
              memory: "{{ .webhook.resources.limits.memory }}"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-webhook")]

      - name: "ensure other webhook changes are made"
        query: spec
        action: merge
        value:
          replicas: !!int {{ .webhook.replicas }}
          template:
            spec:
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        topologyKey: kubernetes.io/hostname
                        labelSelector:
                          matchExpressions:
                            - key: app.kubernetes.io/name
                              operator: In
                              values:
                                - external-secrets-webhook
              nodeSelector:
                kubernetes.io/os: linux
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-webhook")]

      - name: "ensure webhook dns name is updated to match the namespace"
        query: spec.template.spec.containers[?(@.name == "webhook")].args[?(@ =~ /^--dns-name=/)]
        value: "--dns-name=external-secrets-webhook.{{ .namespace }}.svc"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "external-secrets-webhook")]
