---
commonOverlays:
  - name: "apply nukleros labels"
    query: "metadata.labels"
    value:
      app.kubernetes.io/name: "{{ .name }}"
      platform.nukleros.io/group: "{{ .group }}"
      platform.nukleros.io/project: "{{ .project }}"
    # replace labels here to remove all of the helm info
    action: replace
    onMissing:
      action: inject

  - name: "apply nukleros labels to pod template"
    query: "spec.template.metadata.labels"
    value:
      app.kubernetes.io/name: "{{ .name }}"
      platform.nukleros.io/group: "{{ .group }}"
      platform.nukleros.io/project: "{{ .project }}"
    # replace labels here to remove all of the helm info
    action: replace
    onMissing:
      action: inject

  - name: "apply selector matching"
    query: "spec.selector.matchLabels"
    value:
      app.kubernetes.io/name: "{{ .name }}"
      platform.nukleros.io/group: "{{ .group }}"
      platform.nukleros.io/project: "{{ .project }}"
    # replace labels here to remove all of the helm info
    action: replace
    onMissing:
      action: inject

  - name: "remove helm annotations"
    query: "metadata.annotations"
    action: delete

  - name: "rename resources to remove duplication (e.g. reloader-reloader)"
    query: "metadata.name"
    value: "{{ .name }}"

yamlFiles:
  - name: "reloader deployments"
    path: "../../vendor/reloader.yaml"
    outputPath: "secrets/reloader/deployment.yaml"
    overlays:
      - name: "ensure we are only acting upon deployment resources"
        query: "$"
        action: delete
        documentQuery:
          - conditions:
              - query: $[?($.kind != "Deployment")]

      - name: "ensure namespace is updated"
        query: metadata.namespace
        value: "{{ .namespace }}"

      - name: "ensure container name is updated"
        query: spec.template.spec.containers[?(@.name == "reloader-reloader")]
        value:
          name: "{{ .name }}"

      - name: "ensure container security context is updated"
        query: spec.template.spec.containers[*]
        onMissing:
          action: inject
        value:
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
            runAsUser: 65534

      - name: "ensure controller resources are updated"
        query: spec.template.spec.containers[*]
        value:
          resources:
            requests:
              cpu: "{{ .resources.requests.cpu }}"
              memory: "{{ .resources.requests.memory }}"
            limits:
              cpu: "{{ .resources.limits.cpu }}"
              memory: "{{ .resources.limits.memory }}"
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "secret-reloader")]

      - name: "ensure other controller changes are made"
        query: spec
        action: merge
        value:
          replicas: !!int {{ .replicas }}
          template:
            spec:
              serviceAccountName: "{{ .name }}"
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        topologyKey: kubernetes.io/hostname
                        labelSelector:
                          matchExpressions:
                            - key: app.kubernetes.io/name
                              operator: In
                              values:
                                - reloader
              nodeSelector:
                kubernetes.io/os: linux
        documentQuery:
          - conditions:
              - query: $[?($.metadata.name == "secret-reloader")]
